
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(cuid())
  name            String
  email           String?        @unique
  emailVerified   Boolean
  image           String?
  phoneNumber     String?
  documents       Json?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  role            String?        @default("tenant")
  // Apartment relationships
  apartment       Apartment?     @relation(name: "Residents", fields: [apartmentId], references: [id])
  apartmentId     String?
  ownedApartments Apartment[]    @relation("ApartmentOwner")
  // Family relationships
  familyMembers   FamilyMember[] @relation("FamilyHead")
  belongsToFamily FamilyMember?  @relation("FamilyMember")

  username String?

  banned                  Boolean?
  banReason               String?
  banExpires              DateTime?
  sessions                Session[]
  accounts                Account[]
  maintenanceRequests     MaintenanceRequest[]
  notifications           Notification[]
  notificationPreferences NotificationPreference?

  // Emergency Contact Info
  emergencyContactName         String?
  emergencyContactRelationship String?
  emergencyContactPhone        String?

  passkeys Passkey[]

  @@map("user")
  @@unique([username])
}

model FamilyMember {
  id               String    @id @default(cuid())
  relationshipType String // spouse, child, parent, etc.
  // Family head (primary tenant/owner)
  familyHead       User      @relation("FamilyHead", fields: [familyHeadId], references: [id])
  familyHeadId     String
  // The actual user account for this family member
  user             User?     @relation("FamilyMember", fields: [userId], references: [id])
  userId           String?   @unique
  // If the family member doesn't have a user account, store their basic info here
  name             String?
  dateOfBirth      DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  image            String?

  @@index([familyHeadId])
}

model Apartment {
  id                  String                @id @default(cuid())
  title               String
  slug                String                @unique
  images              String[]
  floorPlanImages     String[]
  price               Int
  squareFootage       Int
  bedrooms            Int
  bathrooms           Int
  availableDate       DateTime
  amenities           String[]
  description         String?               @db.Text
  floorPlan           String?
  virtualTourUrl      String?
  category            String?
  featured            Boolean               @default(false)
  location            Json? // Latitude, longitude, and full address
  parkingSpaces       Int?
  petsAllowed         Boolean?
  petPolicy           String?               @db.Text
  leaseTerms          String[]
  nearbyAttractions   String[]
  utilities           Json?
  securityDeposit     Int?
  maintenanceFee      Int?
  courtId             Int?
  court               Court?                @relation(fields: [courtId], references: [id])
  floorNumber         Int?
  apartmentNumber     String?
  status              String                @default("available") // available, occupied, maintenance, reserved
  lastInspectionDate  DateTime?
  energyRating        String?
  furnished           Boolean               @default(false)
  furnishingDetails   Json?
  // Owner relationship
  owner               User                  @relation("ApartmentOwner", fields: [ownerId], references: [id])
  ownerId             String                @unique
  // Residents relationship
  residents           User[]                @relation("Residents")
  // Other relationships
  bookings            Booking[]
  submissions         ApartmentSubmission[]
  cleaningJobs        CleaningJob[]
  maintenanceRequests MaintenanceRequest[]
  reviews             Review[]              @relation("ApartmentReviews")

  @@index([ownerId])
}

// Updated MaintenanceRequest model

model MaintenanceRequest {
  id            Int                 @id @default(autoincrement())
  userId        String
  user          User                @relation(fields: [userId], references: [id])
  apartmentId   String
  apartment     Apartment           @relation(fields: [apartmentId], references: [id])
  title         String
  description   String              @db.Text
  priority      String              @default("normal") // low, medium, high
  status        String              @default("pending") // pending, in-progress, completed
  category      String // plumbing, electrical, hvac, appliance, structural
  images        String[]
  scheduledDate DateTime?
  completedDate DateTime?
  cost          Int?
  notes         String?             @db.Text
  assignedTo    String? // Name of maintenance staff assigned
  updates       MaintenanceUpdate[]
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  @@index([userId])
  @@index([apartmentId])
}

// New MaintenanceUpdate model

model MaintenanceUpdate {
  id                   Int                @id @default(autoincrement())
  message              String
  maintenanceRequest   MaintenanceRequest @relation(fields: [maintenanceRequestId], references: [id], onDelete: Cascade)
  maintenanceRequestId Int
  createdAt            DateTime           @default(now())

  @@index([maintenanceRequestId])
}

// New Notification model

model Notification {
  id        Int      @id @default(autoincrement())
  type      String // maintenance, payment, announcement
  title     String
  message   String
  status    String // success, warning, info
  read      Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

// New NotificationPreference model

model NotificationPreference {
  id                 Int     @id @default(autoincrement())
  userId             String  @unique
  user               User    @relation(fields: [userId], references: [id])
  maintenanceUpdates Boolean @default(true)
  paymentReminders   Boolean @default(true)
  communityUpdates   Boolean @default(true)
}

model ApartmentSubmission {
  id             String     @id @default(cuid())
  title          String
  landlordName   String
  landlordEmail  String
  landlordPhone  String?
  images         String[]
  price          Int
  squareFootage  Int
  bedrooms       Int
  bathrooms      Int
  availableDate  DateTime
  amenities      String[]
  description    String     @db.Text
  address        String
  documents      String[] // Property documents, certificates
  status         String     @default("pending")
  submissionDate DateTime   @default(now())
  reviewedAt     DateTime?
  reviewedBy     String?
  reviewNotes    String?    @db.Text
  apartmentId    String?
  apartment      Apartment? @relation(fields: [apartmentId], references: [id])
}

model Booking {
  id                 Int           @id @default(autoincrement())
  apartmentId        String
  apartment          Apartment     @relation(fields: [apartmentId], references: [id])
  startDate          DateTime
  endDate            DateTime
  paymentType        PaymentType   @default(rent)
  isRecurring        Boolean       @default(false)
  status             BookingStatus @default(PENDING)
  confirmationCode   String?       @db.VarChar(6)
  mpesaReceiptNumber String?       @unique
  phoneNumber        String        @db.VarChar(12) // 2547XXXXXXXX
  totalAmount        Int
  checkoutId         String?       @unique
  nextPaymentDate    DateTime?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  payments           Payment[]

  @@index([checkoutId])
  @@index([status])
  @@map("bookings")
}

model Payment {
  id            Int           @id @default(autoincrement())
  amount        Int
  currency      String        @default("KES")
  status        PaymentStatus @default(PENDING)
  type          PaymentType
  method        PaymentMethod @default(mpesa)
  checkoutId    String?       @unique
  mpesaReceipt  String?       @unique
  description   String?
  phoneNumber   String        @db.VarChar(12)
  bookingId     Int
  booking       Booking       @relation(fields: [bookingId], references: [id])
  transactionId String?       @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([checkoutId])
  @@index([status])
  @@index([transactionId])
  @@map("payments")
}

model CleaningJob {
  id               Int       @id @default(autoincrement())
  apartmentId      String
  apartment        Apartment @relation(fields: [apartmentId], references: [id])
  requestedById    String?
  assignedToId     String?
  status           String    @default("requested")
  tasks            String[]
  scheduledDate    DateTime?
  completedDate    DateTime?
  duration         Int? // in minutes
  notes            String?   @db.Text
  rating           Int?
  review           String?   @db.Text
  price            Int?
  paymentStatus    String?
  serviceType      String? // regular, deep cleaning, move-in/out
  cleaningProducts Boolean   @default(false)
  priority         String    @default("normal")
  photos           String[] // Before and after photos
}

model CleaningService {
  id              Int      @id @default(autoincrement())
  name            String?
  description     String?  @db.Text
  price           Int?
  image           String?
  duration        Int? // Expected duration in minutes
  includedTasks   String[]
  additionalTasks String[]
  availability    Json? // Working hours, days
  requirements    String[]
  supplies        String[]
  rating          Float?
  active          Boolean  @default(true)
}

model Court {
  id                 Int         @id @default(autoincrement())
  name               String
  description        String?     @db.Text
  image              String?
  images             String[]
  address            String?
  totalFloors        Int?
  totalApartments    Int?
  amenities          String[]
  maintenanceContact String?
  securityContact    String?
  parkingCapacity    Int?
  buildingRules      String?     @db.Text
  apartments         Apartment[]
  emergencyExits     Int?
  yearBuilt          Int?
  lastRenovated      DateTime?
  accessControl      Boolean     @default(false)
}

model Review {
  id          Int       @id @default(autoincrement())
  userId      String
  apartmentId String
  apartment   Apartment @relation("ApartmentReviews", fields: [apartmentId], references: [id])
  rating      Int
  review      String    @db.Text
  images      String[]
  response    String?   @db.Text
  status      String    @default("published")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  apartmentId String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  FAILED
  CANCELLED
}

enum PaymentType {
  rent
  deposit
  fee
}

enum PaymentStatus {
  PENDING
  CONFIRMED
  FAILED
  PROCESSING
}

enum PaymentMethod {
  mpesa
  card
  bank
}

model Passkey {
  id           String    @id
  name         String?
  publicKey    String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  credentialID String
  counter      Int
  deviceType   String
  backedUp     Boolean
  transports   String?
  createdAt    DateTime?

  @@map("passkey")
}
